<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Centos Linux下搭建Asp.Net环境]]></title>
    <url>%2F2019%2F05%2F10%2FCentos-Linux%E4%B8%8B%E6%90%AD%E5%BB%BAAsp.Net%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[记录在linux部署Asp.Net运行环境，使用 Mono + Jexus 部署，Mono是linux运行asp.net必须的编译环境，Jexus是国人开发的反向代理服务器，功能类似Nginx,但是Jexus更加强大，支持Asp.Net运行。 Jexus官网地址：https://www.jexus.org/ 传统Mono+Jexus安装方法（较繁琐不推荐）Jexus通用版不带 .NET运行时，因此，使用者应该首先在客户机安装mono和libgdiplus。 在Ubuntu上安装Mono，可参见 在Ubuntu操作系统上安装mono的具体方法在CentOS上安装Mono，可参见 张善友先生写的CentOS Mono安装教程 安装jexus通用版的命令是：curl https://jexus.org/release/install|sudo sh 注：运行安装命令，需要操作者有root权限。 安装Jexus独立版（集成了Mono）1.安装命令 1$ curl https://jexus.org/release/x64/install.sh|sudo sh 2.安装成功后，自动生成安装目录：/usr/jexus/ 3.运行Jexus命令 12$ cd /usr/jexus/$ ./jws start 4.网页访问（默认配置文件/usr/jexus/siteconf/default,默认端口80，默认访问目录/var/www/default） 1$ http://localhost:80/info 看到以上页面说明安装成功 4.新建默认的项目路径 1$ mkdir /var/www/default 将项目文件复制到 /var/www/default目录下 5.自定义配置 1$ vi /usr/jexus/siteconf/default 核心配置 12port=80root=/ /var/www/default #默认访问目录，可自定义 6.常用命令 123$ ./jws start$ ./jws restart$ ./jws stop 安装成功后遇到的问题解答1.System.IO.IOException 详细错误代码： 12345678910111213System.IO.IOExceptionThe configured user limit (128) on the number of inotify instances has been reached.Description: HTTP 500.Error processing request.Details: Non-web exception. Exception origin (name of application or object): System.Exception stack trace: at System.IO.CoreFX.FileSystemWatcher.StartRaisingEvents () [0x0007b] in &lt;e35dfeba7ed248b1a1d7afe3381392f9&gt;:0 at System.IO.CoreFX.FileSystemWatcher.StartRaisingEventsIfNotDisposed () [0x00019] in &lt;e35dfeba7ed248b1a1d7afe3381392f9&gt;:0 at System.IO.CoreFX.FileSystemWatcher.set_EnableRaisingEvents (System.Boolean value) [0x0001d] in &lt;e35dfeba7ed248b1a1d7afe3381392f9&gt;:0 at (wrapper remoting-invoke-with-check) System.IO.CoreFX.FileSystemWatcher.set_EnableRaisingEvents(bool) at System.IO.CoreFXFileSystemWatcherProxy+&lt;&gt;c.&lt;StartDispatching&gt;b__9_0 (System.IO.CoreFX.FileSystemWatcher internal_fsw, System.IO.FileSystemWatcher fsw) [0x00048] in &lt;e35dfeba7ed248b1a1d7afe3381392f9&gt;:0 at System.IO.CoreFXFileSystemWatcherProxy.Operation (System.Action`4[T1,T2,T3,T4] map_op, System.Action`2[T1,T2] object_op, System.Object handle, System.Action`2[T1,T2] cancel_op) [0x00184] in &lt;e35dfeba7ed248b1a1d7afe3381392f9&gt;:0 解决方案: 123$ vi /etc/sysctl.conf$ 在文件末尾新添加一句：fs.inotify.max_user_instances=1024$ ./sbin/sysctl -p #使编辑内容生效]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>ASP.NET</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo静态博客框架搭建]]></title>
    <url>%2F2019%2F04%2F11%2FHexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[记录本人Hexo博客搭建过程，作为开启Hexo博客的第一篇博文。记录本人Hexo博客搭建过程，作为开启Hexo博客的第一篇博文。 nodeJs与git依赖环境搭建1.访问nodeJs官网，下载对应的版本：https://nodejs.org/en/download/ 2.安装完成后，配置环境变量，定位到nodeJs安装根目录 3.验证是否安装成功,成功出现nodeJs版本号，安装成功 1$ node -v 4.访问git官网，下载最新的git安装版本：https://www.git-scm.com/download/ 5.安装完毕后，查看版本号 ,出现版本号为安装成功 1$ git --version Hexo框架搭建与配置注意：以下步骤必须完成以上nodeJs和git环境安装后，才可进行 1.使用npm命令安装hexo 1$ npm install -g hexo-cli 2.使用命令验证版本 1$ hexo --version 3.安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 安装完之后，生成以下文件结构： 4.cd 进入hexo新建目录，启动Hexo 123$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. Hexo NexT主题下载与配置1.通过github下载主题 为建站根目录 12$ cd &lt;folder&gt;$ git clone https://github.com/iissnan/hexo-theme-next themes/next 2.下载完成后，修改主题配置文件（\themes\next_config.yaml） 12345# Schemes# scheme: Muse# scheme: Mistscheme: Pisces# scheme: Gemini 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。 1234$ hexo clean$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 3.修改主题默认语言，编辑hexo根目录下的_config.yaml文件,zh-Hans为中文 1language: zh-Hans Hexo部署到github1.新建仓库,创建名称为：username.github.io (username为你的账号名称) 2.本地生成SSH 123$ git config --global user.name "username"$ git config --global user.email "youremail"$ ssh-keygen -t rsa -C "youremail" #一路回车 3.复制SSH 1$ pbcopy &lt; ~/.ssh/id_rsa.pub 4.添加ssh到github 5.在gitbash中，查看是否成功 1$ ssh -T git@github.com 6.先安装deploy-git 部署的命令,这样你才能用命令部署到GitHub 1$ npm install hexo-deployer-git --save 7.修改Hexo配置_config.yaml，修改为新建的仓库ssh地址 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 8.部署到github 123$ hexo clean$ hexo generate$ hexo deploy 9.访问 feirty.github.io 即可看到网站 github.io绑定域名 访问1.添加域名解析 2.获取github的ip 3.博客文件source中创建一个名为CNAME文件,添加域名，无需前缀 1mxo.mobi 4.重新部署 123$ hexo clean$ hexo generate$ hexo deploy 5.最后尝试用域名访问成功]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
